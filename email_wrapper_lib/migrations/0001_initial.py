# -*- coding: utf-8 -*-
# Generated by Django 1.10.8 on 2018-01-31 15:59
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion
import email_wrapper_lib.models.mixins
import oauth2client.contrib.django_orm


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAccount',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='Username')),
                ('user_id', models.CharField(max_length=255, unique=True, verbose_name='User id')),
                ('credentials', oauth2client.contrib.django_orm.CredentialsField(null=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(0, 'new'), (1, 'idle'), (2, 'syncing'), (3, 'error'), (4, 'resync')], db_index=True, default=0, verbose_name='Status')),
                ('provider_id', models.PositiveSmallIntegerField(choices=[(0, b'Google'), (1, b'Microsoft')], db_index=True, verbose_name='Provider id')),
                ('subscription_id', models.CharField(max_length=255, null=True, verbose_name='Subscription id')),
            ],
            bases=(email_wrapper_lib.models.mixins.SoftDeleteMixin, email_wrapper_lib.models.mixins.TimeStampMixin, models.Model),
        ),
        migrations.CreateModel(
            name='EmailFolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('parent_id', models.CharField(max_length=255, null=True, verbose_name='Parent')),
                ('remote_id', models.CharField(max_length=255, verbose_name='Remote id')),
                ('remote_value', models.CharField(max_length=255, verbose_name='Remote value')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('folder_type', models.PositiveSmallIntegerField(choices=[(0, 'System'), (1, 'User')], verbose_name='Folder type')),
                ('unread_count', models.PositiveIntegerField(verbose_name='Unread count')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='folders', to='email_wrapper_lib.EmailAccount', verbose_name='Account')),
            ],
        ),
        migrations.CreateModel(
            name='EmailMessage',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('remote_id', models.CharField(max_length=255, verbose_name='Remote id')),
                ('thread_id', models.CharField(max_length=255, verbose_name='Thread id')),
                ('message_id', models.CharField(max_length=255, verbose_name='Message id')),
                ('snippet', models.CharField(max_length=255, verbose_name='Snippet')),
                ('subject', models.CharField(max_length=255, verbose_name='Subject')),
                ('received_date_time', models.DateTimeField(verbose_name='Date')),
                ('is_read', models.BooleanField(verbose_name='Is read')),
                ('is_starred', models.BooleanField(verbose_name='Is starred')),
                ('account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='email_wrapper_lib.EmailAccount', verbose_name='Account')),
                ('folder', models.ManyToManyField(related_name='messages', to='email_wrapper_lib.EmailFolder', verbose_name='Folder')),
            ],
        ),
        migrations.CreateModel(
            name='EmailMessageToEmailRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_type', models.PositiveSmallIntegerField(choices=[(0, 'To'), (1, 'CC'), (2, 'BCC'), (3, 'From'), (4, 'Sender'), (5, 'Reply to')], verbose_name='Recipient type')),
                ('message', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='email_wrapper_lib.EmailMessage', verbose_name='Message')),
            ],
        ),
        migrations.CreateModel(
            name='EmailRecipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Name')),
                ('email_address', models.EmailField(max_length=254, verbose_name='Email')),
                ('raw_value', models.CharField(db_index=True, editable=False, max_length=255, unique=True, verbose_name='Raw value')),
            ],
        ),
        migrations.CreateModel(
            name='GoogleSyncInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_id', models.CharField(max_length=255, null=True, verbose_name='History token')),
                ('account', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='google_sync_info', to='email_wrapper_lib.EmailAccount', verbose_name='Account')),
            ],
        ),
        migrations.CreateModel(
            name='MicrosoftSyncInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('history_id', models.CharField(max_length=255, null=True, verbose_name='History token')),
                ('folder', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='microsoft_sync_info', to='email_wrapper_lib.EmailFolder', verbose_name='Folder')),
            ],
        ),
        migrations.AddField(
            model_name='emailmessagetoemailrecipient',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='email_wrapper_lib.EmailRecipient', verbose_name='Recipient'),
        ),
        migrations.AddField(
            model_name='emailmessage',
            name='recipients',
            field=models.ManyToManyField(related_name='messages', through='email_wrapper_lib.EmailMessageToEmailRecipient', to='email_wrapper_lib.EmailRecipient', verbose_name='Recipients'),
        ),
        migrations.AlterUniqueTogether(
            name='emailfolder',
            unique_together=set([('account', 'remote_id', 'remote_value')]),
        ),
    ]
